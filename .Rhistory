unnest(GBFeature_intervals, GBFeature_quals) %>%
filter(GBQualifier_name == "product" & GBQualifier_value != "polyprotein")
}
# Specify id
id <- "MW165880.1"
# Fetch metadata for a given nucleotide entry we know has annotations, convert to XML
fetched_annots <- entrez_fetch(db = "nuccore", id = id, rettype="gp", retmode="xml") %>% xmlParse %>% xmlToList
# Create a table of start/end positions corresponding to each annotation
annot_table <- fetched_annots %>% lapply(., function(x) process_annot_features(x)) %>% bind_rows
# Process annotations from an annotated GenBank nucleotide entry
process_annot_features <- function(data) {
handy_tab <- data$GBSeq$`GBSeq_feature-table` %>%
bind_rows %>%
select(GBFeature_intervals, GBFeature_quals) %>%
mutate(GBFeature_intervals = map(GBFeature_intervals, as_tibble),
GBFeature_quals = map(GBFeature_quals, as_tibble)) %>%
unnest(GBFeature_intervals, GBFeature_quals) %>%
filter(GBQualifier_name == "product" & GBQualifier_value != "polyprotein")
}
# Create a table of start/end positions corresponding to each annotation
annot_table <- fetched_annots %>% lapply(., function(x) process_annot_features(x)) %>% bind_rows
fetched_annots$GBSeq$`GBSeq_feature-table`
fetched_annots$GBSeq$`GBSeq_feature-table` %>% bind_rows
fetched_annots$GBSeq$`GBSeq_feature-table` %>% bind_rows()
library(dplyr)
library(ggplot2)
library(magrittr)
library(tidyverse)
library(rentrez)
library(XML)
# Process annotations from an annotated GenBank nucleotide entry
process_annot_features <- function(data) {
handy_tab <- data$GBSeq$`GBSeq_feature-table` %>%
bind_rows %>%
select(GBFeature_intervals, GBFeature_quals) %>%
mutate(GBFeature_intervals = map(GBFeature_intervals, as_tibble),
GBFeature_quals = map(GBFeature_quals, as_tibble)) %>%
unnest(GBFeature_intervals, GBFeature_quals) %>%
filter(GBQualifier_name == "product" & GBQualifier_value != "polyprotein")
}
# Specify id
id <- "MW165880.1"
# Fetch metadata for a given nucleotide entry we know has annotations, convert to XML
fetched_annots <- entrez_fetch(db = "nuccore", id = id, rettype="gp", retmode="xml") %>% xmlParse %>% xmlToList
# Create a table of start/end positions corresponding to each annotation
annot_table <- fetched_annots %>% lapply(., function(x) process_annot_features(x)) %>% bind_rows
fetched_annots$GBSeq$`GBSeq_feature-table`
fetched_annots$GBSeq$`GBSeq_feature-table` %>% bind_rows
fetched_annots$GBSeq$`GBSeq_feature-table` %>% dplyr::bind_rows
?bind_rows
fetched_annots[[1]]
fetched_annots[[1]]$`GBSeq_feature-table`
fetched_annots[[1]]$`GBSeq_feature-table` %>% bind_rows()
fetched_annots[[1]]$`GBSeq_feature-table` %>% hoist()
fetched_annots[[1]]$`GBSeq_feature-table` %>% unnest()
?bind_rows
# Process annotations from an annotated GenBank nucleotide entry
process_annot_features <- function(data) {
handy_tab <- data$GBSeq$`GBSeq_feature-table` %>%
bind_cols %>%
select(GBFeature_intervals, GBFeature_quals) %>%
mutate(GBFeature_intervals = map(GBFeature_intervals, as_tibble),
GBFeature_quals = map(GBFeature_quals, as_tibble)) %>%
unnest(GBFeature_intervals, GBFeature_quals) %>%
filter(GBQualifier_name == "product" & GBQualifier_value != "polyprotein")
}
# Specify id
id <- "MW165880.1"
# Fetch metadata for a given nucleotide entry we know has annotations, convert to XML
fetched_annots <- entrez_fetch(db = "nuccore", id = id, rettype="gp", retmode="xml") %>% xmlParse %>% xmlToList
# Create a table of start/end positions corresponding to each annotation
annot_table <- fetched_annots %>% lapply(., function(x) process_annot_features(x)) %>% bind_rows
data$GBSeq$`GBSeq_feature-table` %>%
bind_cols
# Create a table of start/end positions corresponding to each annotation
annot_table <- fetched_annots %>% lapply(., function(x) process_annot_features(x)) %>% bind_cols
# Create a table of start/end positions corresponding to each annotation
fetched_annots %>% lapply(., function(x) process_annot_features(x)) %>% bind_cols
# Create a table of start/end positions corresponding to each annotation
fetched_annots %>% lapply(., function(x) process_annot_features(x))
process_annot_features(fetched_annots)
# Process annotations from an annotated GenBank nucleotide entry
process_annot_features <- function(data) {
handy_tab <- data[[1]]$`GBSeq_feature-table` %>%
bind_rows %>%
select(GBFeature_intervals, GBFeature_quals) %>%
mutate(GBFeature_intervals = map(GBFeature_intervals, as_tibble),
GBFeature_quals = map(GBFeature_quals, as_tibble)) %>%
unnest(GBFeature_intervals, GBFeature_quals) %>%
filter(GBQualifier_name == "product" & GBQualifier_value != "polyprotein")
}
# Specify id
id <- "MW165880.1"
# Fetch metadata for a given nucleotide entry we know has annotations, convert to XML
fetched_annots <- entrez_fetch(db = "nuccore", id = id, rettype="gp", retmode="xml") %>% xmlParse %>% xmlToList
annot_table <- fetched_annots %>% lapply(., function(x) process_annot_features(x)) %>% bind_rows
process_annot_features(fetched_annots)
annot_table <- fetched_annots[[1]] %>% lapply(., function(x) process_annot_features(x)) %>% bind_rows
fetched_annots
fetched_annots[[1]]
fetched_annots[[1]][1]
fetched_annots[[1]][1] %>% bind_rows
fetched_annots[[1]]$`GBSeq_feature-table`
fetched_annots[[1]]$`GBSeq_feature-table`
fetched_annots[[1]]$`GBSeq_feature-table`[1]
fetched_annots[[1]]$`GBSeq_feature-table`[1]  %>% bind_rows()
fetched_annots[[1]]$`GBSeq_feature-table`[[1]]  %>% bind_rows()
fetched_annots[[1]]$`GBSeq_feature-table`[[1]]  %>% bind_rows() %>%
select(GBFeature_intervals, GBFeature_quals) %>%
mutate(GBFeature_intervals = map(GBFeature_intervals, as_tibble),
GBFeature_quals = map(GBFeature_quals, as_tibble)) %>%
unnest(GBFeature_intervals, GBFeature_quals) %>%
filter(GBQualifier_name == "product" & GBQualifier_value != "polyprotein")
# Process annotations from an annotated GenBank nucleotide entry
process_annot_features <- function(data) {
handy_tab <- data %>%
bind_rows %>%
select(GBFeature_intervals, GBFeature_quals) %>%
mutate(GBFeature_intervals = map(GBFeature_intervals, as_tibble),
GBFeature_quals = map(GBFeature_quals, as_tibble)) %>%
unnest(GBFeature_intervals, GBFeature_quals) %>%
filter(GBQualifier_name == "product" & GBQualifier_value != "polyprotein")
}
# Create a table of start/end positions corresponding to each annotation
annot_table <- (fetched_annots[[1]]$`GBSeq_feature-table`) %>% lapply(., function(x) process_annot_features(x)) %>% bind_rows
# Fetch the nucleotide sequence for the above nucleotide entry
entrez_fetch(db = "nuccore",id = id, rettype="fasta_cds_na") %>% write(file = "data\\temp.fasta") # write to temporary FASTA
nuc <- readDNAStringSet("data\\temp.fasta") # read back in as a DNAStringSet object for Biostrings package
annot_table
# Fetch the nucleotide sequence for the above nucleotide entry
entrez_fetch(db = "nuccore",id = id, rettype="fasta_cds_na") %>% write(file = "data\\temp.fasta") # write to temporary FASTA
# Fetch the nucleotide sequence for the above nucleotide entry
entrez_fetch(db = "nuccore",id = id, rettype="fasta_cds_na") %>% write(file = "~/Github/flaviflav/temp.fasta") # write to temporary FASTA
entrez_fetch(db = "nuccore",id = id, rettype="fasta_cds_na")
entrez_fetch(db = "nuccore",id = id, rettype="fasta_cds_na") %>% write(file = "~/Github/flaviflav/temp.fasta")
# Fetch the nucleotide sequence for the above nucleotide entry
entrez_fetch(db = "nuccore",id = id, rettype="fasta_cds_na") %>% write(file = "~/Github/flaviflav/temp.fasta") # write to temporary FASTA
nuc <- readDNAStringSet("temp.fasta") # read back in as a DNAStringSet object for Biostrings package
library(Biostrings)
install.package("Biostrings")
install.packages("Biostrings")
install.packages("BioStrings")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Biostrings")
install.packages("rworldmap")
library(classInt)
library(dplyr)
library(rgdal)
library(RColorBrewer)
library(rworldmap)
library(tidyverse)
# Read in the data
region.final <- read.csv('~/Github/tickmaps/TickMaps.csv')
ticks <- read.csv('~/Github/tickmaps/TickMaps.csv')
demo <- ticks$ISO_code
demo
isodf <- function(x) {
x <- strsplit(paste(x, collapse=', '), ', ')[[1]]
df <- data.frame(table(x))
names(df) <- c('ISO','Count')
return(df)
}
# Attach that all to the map
sPDF <- joinCountryData2Map(isodf(demo)
,joinCode = "ISO3"
,nameJoinColumn = "ISO")
# Makes the breaks for the legend
classInt <- classIntervals( sPDF[["Count"]]
,n=7, style = "equal")
catMethod = classInt[["brks"]]
# Color palette
colourPalette <- brewer.pal(7,'RdPu')
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot='Count',
colourPalette=colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
sPDF
table(demo)
isodf
isodf(demo)
isodf <- function(x) {
x <- strsplit(paste(x, collapse=','), ',')[[1]]
df <- data.frame(table(x))
names(df) <- c('ISO','Count')
return(df)
}
isodf <- function(x) {
x <- strsplit(paste(x, collapse=','), ',')[[1]]
df <- data.frame(table(x))
names(df) <- c('ISO','Count')
return(df)
}
# Attach that all to the map
sPDF <- joinCountryData2Map(isodf(demo),
joinCode = "ISO3",
nameJoinColumn = "ISO")
# Makes the breaks for the legend
classInt <- classIntervals( sPDF[["Count"]]
,n=7, style = "equal")
catMethod = classInt[["brks"]]
# Color palette
colourPalette <- brewer.pal(7,'RdPu')
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot = 'Count',
colourPalette = colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
library(classInt)
library(dplyr)
library(rgdal)
library(RColorBrewer)
library(rworldmap)
library(tidyverse)
# Read in the data
ticks <- read.csv('~/Github/tickmaps/TickMaps.csv')
# Pull out the iso codes column - this is what gets mapped
demo <- ticks$ISO_code
# This restructures them
isodf <- function(x) {
x <- strsplit(paste(x, collapse=','), ',')[[1]]
df <- data.frame(table(x))
names(df) <- c('ISO','Count')
return(df)
}
# Attach that all to the map
sPDF <- joinCountryData2Map(isodf(demo),
joinCode = "ISO3",
nameJoinColumn = "ISO")
# Makes the breaks for the legend
classInt <- classIntervals( sPDF[["Count"]]
,n=7, style = "equal")
catMethod = classInt[["brks"]]
# Color palette
colourPalette <- brewer.pal(7,'RdPu')
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot = 'Count',
colourPalette = colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
library(classInt)
library(dplyr)
library(rgdal)
library(RColorBrewer)
library(rworldmap)
library(tidyverse)
# Read in the data
ticks <- read.csv('~/Github/tickmaps/TickMaps.csv')
# Pull out the iso codes column - this is what gets mapped
demo <- ticks$ISO_code
# This restructures them
isodf <- function(x) {
x <- strsplit(paste(x, collapse=', '), ',')[[1]]
df <- data.frame(table(x))
names(df) <- c('ISO','Count')
return(df)
}
# Attach that all to the map
sPDF <- joinCountryData2Map(isodf(demo),
joinCode = "ISO3",
nameJoinColumn = "ISO")
# Makes the breaks for the legend
classInt <- classIntervals( sPDF[["Count"]]
,n=7, style = "equal")
catMethod = classInt[["brks"]]
# Color palette
colourPalette <- brewer.pal(7,'RdPu')
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot = 'Count',
colourPalette = colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
unnest(demo)
demo %>% unnest()
demo
class(demo)
ticks %>%
as_tibble() %>%
select(ISO_code)
ticks %>%
as_tibble() %>%
select(ISO_code) %>%
unnest()
ticks %>%
as_tibble() %>%
select(ISO_code) %>%
mutate(ISO_code = strsplit(ISO_code, ','))
ticks %>%
as_tibble() %>%
select(ISO_code) %>%
mutate(ISO_code = strsplit(ISO_code, ',')) %>%
unnest()
ticks %>%
as_tibble() %>%
select(ISO_code) %>%
mutate(ISO_code = strsplit(ISO_code, ',')) %>%
unnest() %>%
count()
ticks %>%
as_tibble() %>%
select(ISO_code) %>%
mutate(ISO_code = strsplit(ISO_code, ',')) %>%
unnest() %>%
count(ISO_code)
ticks %>%
as_tibble() %>%
select(ISO_code) %>%
mutate(ISO_code = strsplit(ISO_code, ',')) %>%
unnest() %>%
count(ISO_code) -> demo
# Attach that all to the map
sPDF <- joinCountryData2Map(demo
joinCode = "ISO3",
nameJoinColumn = "ISO")
ticks %>%
as_tibble() %>%
select(ISO_code) %>%
mutate(ISO_code = strsplit(ISO_code, ',')) %>%
unnest() %>%
count(ISO_code) -> demo
demo
# Attach that all to the map
sPDF <- joinCountryData2Map(demo,
joinCode = "ISO3",
nameJoinColumn = "ISO")
# Attach that all to the map
sPDF <- joinCountryData2Map(demo,
joinCode = "ISO3",
nameJoinColumn = "ISO_code")
# Makes the breaks for the legend
classInt <- classIntervals( sPDF[["Count"]]
,n=7, style = "equal")
catMethod = classInt[["brks"]]
# Color palette
colourPalette <- brewer.pal(7,'RdPu')
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot = 'Count',
colourPalette = colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
demo
# Makes the breaks for the legend
classInt <- classIntervals(sPDF[["n"]], n = 7, style = "equal")
catMethod = classInt[["brks"]]
# Color palette
colourPalette <- brewer.pal(7,'RdPu')
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot = 'Count',
colourPalette = colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot = 'n',
colourPalette = colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
?classIntervals
# Makes the breaks for the legend
classInt <- classIntervals(sPDF[["n"]], n = 10, style = "quantile")
catMethod = classInt[["brks"]]
# Color palette
colourPalette <- brewer.pal(7,'RdPu')
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot = 'n',
colourPalette = colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
# Makes the breaks for the legend
classInt <- classIntervals(sPDF[["n"]], n = 5, style = "quantile")
catMethod = classInt[["brks"]]
# Color palette
colourPalette <- brewer.pal(7,'RdPu')
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot = 'n',
colourPalette = colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
classInt
classInt[["brks"]
]
# Makes the breaks for the legend
classInt <- classIntervals(sPDF[["n"]], n = 10, style = "quantile")
catMethod = unique(classInt[["brks"]])
# Color palette
colourPalette <- brewer.pal(7,'RdPu')
#mapDevice() #create world map shaped window
mapCountryData(sPDF,
nameColumnToPlot = 'n',
colourPalette = colourPalette,
catMethod = catMethod,
mapTitle = "Number of studies") # Change this to change the title
spplot(sPDF, 'n')
?spplot
demo
range(demo$n)
demo$n <- factor(demo$n, levels=1:107)
demo
cols <- brewer.pal(107, "Spectral")
cols <- brewer.pal(11, "Spectral")
?colorRampPalette
cols <- colorRampPalette(cols)[[107]]
cols <- colorRampPalette(cols)(107)
spplot(sPDF, 'n', values = cols)
cols
spplot(sPDF, 'n', col.regions = cols)
cols <- rev(colorRampPalette(cols)(107))
spplot(sPDF, 'n', col.regions = cols)
ticks %>% as_tibble() %>%
filter(ISO_code == '')
ticks %>% as_tibble() %>%
filter(ISO_code == '') %>%
select(ISO_country)
ticks %>% as_tibble() %>%
filter(ISO_code == '') %>%
select(ISO_country) %>%
mutate(ISO_country, str_split(ISO_country, ','))
ticks %>% as_tibble() %>%
filter(ISO_code == '') %>%
select(ISO_country) %>%
mutate(ISO_country = str_split(ISO_country, ',')) %>%
unnest(ISO_country)
ticks %>% as_tibble() %>%
filter(ISO_code == '') %>%
select(ISO_country) %>%
mutate(ISO_country = str_split(ISO_country, ', ')) %>%
unnest(ISO_country)
ticks %>% as_tibble() %>%
filter(ISO_code == '') %>%
select(ISO_country) %>%
mutate(ISO_country = str_split(ISO_country, ', ')) %>%
unnest(ISO_country) %>%
count(ISO_country)
setwd("~/Github/TickMaps")
library(ggthemr)
library(LaCroixColoR)
library(tidyverse)
library(patchwork)
library(RColorBrewer)
set.seed(5)
tk <- read_csv("TickMaps.csv")
ggthemr('dust')
x <- ggthemr('flat', set_theme = FALSE)
y <- ggthemr('light', set_theme = FALSE)
set.seed(5)
ramp1 <- colorRampPalette(unlist(x$palette$swatch))(21)
ramp2 <- colorRampPalette(unlist(y$palette$swatch))(9)
tk %>% select(Date, Pathogen_Disease) %>%
mutate(Pathogen_Disease = strsplit(Pathogen_Disease, ",")) %>%
unnest(Pathogen_Disease) %>%
group_by(Pathogen_Disease, Date) %>%
tally() %>%
ungroup() %>%
na.omit() %>%
complete(Pathogen_Disease, Date, fill = list(n = 0)) %>%
group_by(Pathogen_Disease) %>%
mutate(Studies = cumsum(n)) %>%
dplyr::rename(Disease = Pathogen_Disease) %>%
ggplot(aes(x = Date, y = Studies, fill = Disease)) +
geom_area() +
theme(legend.position = "bottom",
axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = 'black', fill = NA),
legend.text = element_text(size = 7.5)) +
scale_fill_manual(values = ramp1) -> g1
tk %>% select(Date, Vector) %>%
mutate(Vector = strsplit(Vector, ",")) %>%
unnest(Vector) %>%
mutate(Vector = word(Vector, 1)) %>%
group_by(Vector, Date) %>%
tally() %>%
ungroup() %>%
na.omit() %>%
complete(Vector, Date, fill = list(n = 0)) %>%
group_by(Vector) %>%
mutate(Studies = cumsum(n)) %>%
ggplot(aes(x = Date, y = Studies, fill = Vector)) +
geom_area() +
theme(legend.position = "bottom") +
theme(axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = 'black', fill = NA),
legend.text = element_text(size = 7.5)) +
scale_fill_manual(values = ramp2) -> g2
g2 / g1
ggthemr_reset()
ggthemr('flat')
cat.rec <- c(`Grey data` = 'Point data')
tk %>% select(Date, Category) %>%
mutate(Category = strsplit(Category, ",")) %>%
unnest(Category) %>%
group_by(Category, Date) %>%
tally() %>%
ungroup() %>%
na.omit() %>%
complete(Category, Date, fill = list(n = 0)) %>%
mutate(Category = recode(Category, !!!cat.rec)) %>%
group_by(Category) %>%
mutate(Studies = cumsum(n)) %>%
ggplot(aes(x = Date, y = Studies, fill = Category)) +
geom_area() +
theme(legend.position = "bottom") +
theme(axis.line = element_line(colour = "black"),
panel.border = element_rect(colour = 'black', fill = NA))
